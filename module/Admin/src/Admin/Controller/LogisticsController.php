<?php
namespace Admin\Controller;

use Laminas\Mvc\Controller\AbstractActionController;
use Laminas\Mvc\MvcEvent;
use Laminas\View\Model\ViewModel;
use Doctrine\ORM\EntityManager;
use General\Service\GeneralService;
use Logistics\Entity\LogisticsRequest;
use Doctrine\ORM\Query;
use DoctrineORMModule\Paginator\Adapter\DoctrinePaginator;
use Doctrine\ORM\Tools\Pagination\Paginator as ORMPaginator;
use Laminas\Paginator\Paginator;
use Logistics\Service\LogisticsService;
use Laminas\View\Model\JsonModel;

// use Laminas\View\Model\JsonModel;

/**
 *
 * @author mac
 *        
 */
class LogisticsController extends AbstractActionController
{

    /**
     *
     * @var EntityManager
     */
    private $entityManager;

    /**
     *
     * @var GeneralService
     */
    private $generalService;

    public function onDispatch(MvcEvent $e)
    {
        return parent::onDispatch($e); // TODO: Change the autogenerated stub
    }

    public function viewAction()
    {
        $viewModel = new ViewModel();
        $id = $this->params()->fromRoute("id", NULL);
        
        if ($id == NULL) {
            $viewModel->setVariables([
                "error" => "Absent Identifier"
            ]);
        } else {
            $em = $this->entityManager;
            $query = $em->getRepository(LogisticsRequest::class)
                ->createQueryBuilder("l")
                ->select([
                "l",
                "u",
                "pm",
                "svt",
                "t",
                "st"
            
            ])
                ->leftJoin("l.user", "u")
                ->leftJoin("l.serviceType", "svt")
                ->leftJoin("l.paymentmode", "pm")
                ->leftJoin("l.logisticsTransaction", "t")
                ->leftJoin("l.status", "st")
                ->where("l.logisticsUid = :uid")
                ->setParameters([
                "uid" => $id
            ])
                ->getQuery()
                ->setHydrationMode(Query::HYDRATE_ARRAY)
                ->getArrayResult();
            
            // var_dump($query);
            $viewModel->setVariables([
                "data" => $query[0]
            ]);
        }
        
        return $viewModel;
    }

    /**
     * This return a list of all
     *
     * @return ViewModel
     */
    public function indexAction()
    {
        $em = $this->entityManager;
        $page = $this->params()->fromQuery("page", NULL) ?? 1;
        $count = $this->params()->fromQuery("count", NULL) ?? 50;
        $query = $this->entityManager->getRepository(LogisticsRequest::class)
            ->createQueryBuilder("l")
            ->select([
            "l",
            "st",
            "u",
            "sta",
            "t"
        ])
            ->leftJoin("l.serviceType", "st")
            ->leftJoin("l.user", "u")
            ->leftJoin("l.logisticsTransaction", "t")
            ->leftJoin("l.status", "sta")
            ->getQuery()
            ->setHydrationMode(Query::HYDRATE_ARRAY);
        $doctrinePaginator = new DoctrinePaginator(new ORMPaginator($query, false));
        $paginator = new Paginator($doctrinePaginator);
        $paginator->setCurrentPageNumber($page)->setDefaultItemCountPerPage($count);
        
        $viewModel = new ViewModel();
        $viewModel->setVariables([
            "data" => $paginator
        ]);
        return $viewModel;
    }

    public function upcomingTripAction()
    {
        $em = $this->entityManager;
        $page = $this->params()->fromQuery("page", NULL) ?? 1;
        $count = $this->params()->fromQuery("count", NULL) ?? 50;
        $query = $this->entityManager->getRepository(LogisticsRequest::class)
            ->createQueryBuilder("l")
            ->select([
            "l",
            "st",
            "u",
            "sta",
            "t"
        ])
            ->leftJoin("l.serviceType", "st")
            ->leftJoin("l.user", "u")
            ->leftJoin("l.status", "sta")
            ->leftJoin("l.logisticsTransaction", "t")
            ->where("l.status = :status")
            ->setParameters([
            "status" => LogisticsService::LOGISTICS_STATUS_PROCESSING
        ])
            ->getQuery()
            ->setHydrationMode(Query::HYDRATE_ARRAY);
        $doctrinePaginator = new DoctrinePaginator(new ORMPaginator($query, false));
        $paginator = new Paginator($doctrinePaginator);
        $paginator->setCurrentPageNumber($page)->setDefaultItemCountPerPage($count);
        
        $viewModel = new ViewModel();
        $viewModel->setVariables([
            "data" => $paginator
        ]);
        return $viewModel;
    }

    public function initiatedTripAction()
    {
        $em = $this->entityManager;
        $page = $this->params()->fromQuery("page", NULL) ?? 1;
        $count = $this->params()->fromQuery("count", NULL) ?? 50;
        $query = $this->entityManager->getRepository(LogisticsRequest::class)
            ->createQueryBuilder("l")
            ->select([
            "l",
            "st",
            "u",
            "t",
            "sta"
        ])
            ->leftJoin("l.serviceType", "st")
            ->leftJoin("l.user", "u")
            ->leftJoin("l.status", "sta")
            ->leftJoin("l.logisticsTransaction", "t")
            ->where("l.status = :status")
            ->andWhere("l.isActive = :active")
            ->setParameters([
            "status" => LogisticsService::LOGISTICS_STATUS_INITIATED,
            "active" => TRUE
        ])
            ->getQuery()
            ->setHydrationMode(Query::HYDRATE_ARRAY);
        $doctrinePaginator = new DoctrinePaginator(new ORMPaginator($query, false));
        $paginator = new Paginator($doctrinePaginator);
        $paginator->setCurrentPageNumber($page)->setDefaultItemCountPerPage($count);
        
        $viewModel = new ViewModel();
        $viewModel->setVariables([
            "data" => $paginator
        ]);
        return $viewModel;
    }

    public function inTransiTripAction()
    {
        $em = $this->entityManager;
        $page = $this->params()->fromQuery("page", NULL) ?? 1;
        $count = $this->params()->fromQuery("count", NULL) ?? 50;
        $query = $this->entityManager->getRepository(LogisticsRequest::class)
            ->createQueryBuilder("l")
            ->select([
            "l",
            "st",
            "u",
            "sta",
            "t"
        ])
            ->leftJoin("l.serviceType", "st")
            ->leftJoin("l.user", "u")
            ->leftJoin("l.status", "sta")
            ->leftJoin("l.logisticsTransaction", "t")
            ->where("l.status = :status")
            ->andWhere("l.isActive = :active")
            ->setParameters([
            "status" => LogisticsService::LOGISTICS_STATUS_PROCESSING,
            "active" => TRUE
        ])
            ->getQuery()
            ->setHydrationMode(Query::HYDRATE_ARRAY);
        $doctrinePaginator = new DoctrinePaginator(new ORMPaginator($query, false));
        $paginator = new Paginator($doctrinePaginator);
        $paginator->setCurrentPageNumber($page)->setDefaultItemCountPerPage($count);
        
        $viewModel = new ViewModel();
        $viewModel->setVariables([
            "data" => $paginator
        ]);
        return $viewModel;
    }

    public function canceledAction()
    {
        $em = $this->entityManager;
        $page = $this->params()->fromQuery("page", NULL) ?? 1;
        $count = $this->params()->fromQuery("count", NULL) ?? 50;
        $query = $this->entityManager->getRepository(LogisticsRequest::class)
            ->createQueryBuilder("l")
            ->select([
            "l",
            "st",
            "u",
            "sta",
            
            "t"
        ])
            ->leftJoin("l.serviceType", "st")
            ->leftJoin("l.user", "u")
            ->leftJoin("l.logisticsTransaction", "t")
            ->leftJoin("l.status", "sta")
            ->where("l.status = :status")
            ->andWhere("l.isActive = :active")
            ->setParameters([
            "status" => LogisticsService::LOGISTICS_STATUS_CANCELED,
            "active" => TRUE
        ])
            ->getQuery()
            ->setHydrationMode(Query::HYDRATE_ARRAY);
        $doctrinePaginator = new DoctrinePaginator(new ORMPaginator($query, false));
        $paginator = new Paginator($doctrinePaginator);
        $paginator->setCurrentPageNumber($page)->setDefaultItemCountPerPage($count);
        
        $viewModel = new ViewModel();
        $viewModel->setVariables([
            "data" => $paginator
        ]);
        return $viewModel;
    }

    public function deliveredAction()
    {
        $em = $this->entityManager;
        $page = $this->params()->fromQuery("page", NULL) ?? 1;
        $count = $this->params()->fromQuery("count", NULL) ?? 50;
        $query = $this->entityManager->getRepository(LogisticsRequest::class)
            ->createQueryBuilder("l")
            ->select([
            "l",
            "st",
            "u",
            "sta",
            "t"
        ])
            ->leftJoin("l.serviceType", "st")
            ->leftJoin("l.user", "u")
            ->leftJoin("l.logisticsTransaction", "t")
            ->leftJoin("l.status", "sta")
            ->where("l.status = :status")
            ->andWhere("l.isActive = :active")
            ->setParameters([
            "status" => LogisticsService::LOGISTICS_STATUS_DELIVERED,
            "active" => TRUE
        ])
            ->getQuery()
            ->setHydrationMode(Query::HYDRATE_ARRAY);
        $doctrinePaginator = new DoctrinePaginator(new ORMPaginator($query, false));
        $paginator = new Paginator($doctrinePaginator);
        $paginator->setCurrentPageNumber($page)->setDefaultItemCountPerPage($count);
        
        $viewModel = new ViewModel();
        $viewModel->setVariables([
            "data" => $paginator
        ]);
        return $viewModel;
    }

    public function getridersAction()
    {
        $jsonModel = new JsonModel();
        $em = $this->entityManager;
        $data = $em->createQueryBuilder("r")
            ->select([
            "r"
        ])
            ->where("r.isActive = :active")
            ->setParameters([
            "active" => TRUE
        ])
            ->getQuery()
            ->setHydrationMode(Query::HYDRATE_ARRAY)
            ->getArrayResult();
        
        $jsonModel->setVariables([
            "data" => $data
        ]);
        return $jsonModel;
    }

    /**
     *
     * @return the $entityManager
     */
    public function getEntityManager()
    {
        return $this->entityManager;
    }

    /**
     *
     * @return the $generalService
     */
    public function getGeneralService()
    {
        return $this->generalService;
    }

    /**
     *
     * @param \Doctrine\ORM\EntityManager $entityManager            
     */
    public function setEntityManager($entityManager)
    {
        $this->entityManager = $entityManager;
        return $this;
    }

    /**
     *
     * @param \General\Service\GeneralService $generalService            
     */
    public function setGeneralService($generalService)
    {
        $this->generalService = $generalService;
        return $this;
    }
}

